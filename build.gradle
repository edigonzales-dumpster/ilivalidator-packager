plugins {
    id "de.undercouch.download" version "4.1.1"
}

import java.nio.file.Paths
import org.apache.tools.ant.taskdefs.condition.Os       

repositories {
    jcenter()
}

//def pathToTempFolder = System.getProperty("java.io.tmpdir")
def pathToTempFolder = "."
//def pathToUnzipFolder = Paths.get(pathToTempFolder, "unzip_data")
def pathToUnzipFolder = "."

version "1.11.6"
def bindistName = "ilivalidator-"+version

task downloadZip(type: Download) {
    description = "Download zipped ilivalidator release."
    src 'https://github.com/claeis/ilivalidator/releases/download/'+bindistName+'/'+bindistName+'.zip'
    dest pathToTempFolder
}

task unzipFile(type: Copy, dependsOn: 'downloadZip') {
    description = "Unzip downloaded ilivalidator release."
    from zipTree(pathToTempFolder + File.separatorChar + bindistName+'.zip')
    into pathToUnzipFolder
    doLast {
        println "Unzipped to: " + pathToUnzipFolder
    } 
}

/*
task jdeps(type: Exec) {
    workingDir pathToUnzipFolder 
    commandLine osAdaptiveCommand("jdeps", "--class-path", pathToUnzipFolder.toString() + File.separatorChar + "libs/*", "--multi-release", "base", "-recursive", "--ignore-missing-deps", "--print-module-deps", pathToUnzipFolder.toString() + File.separatorChar + bindistName + ".jar")
}

task jlink(type: Exec) {
    workingDir pathToUnzipFolder 
    commandLine osAdaptiveCommand("jlink", "--add-modules", "\$(jdeps", "--class-path", pathToUnzipFolder.toString() + File.separatorChar + "libs/*", "--multi-release", "base", "-recursive", "--ignore-missing-deps", "--print-module-deps", pathToUnzipFolder.toString() + File.separatorChar + bindistName + ".jar)",   "--output", "ilivalidator-jre")   
}

task copyMainJar(type: Copy) {
    from(pathToUnzipFolder) {
        include '*.jar'
    }
    into pathToUnzipFolder.toString() + File.separatorChar + "libs"
}

task jpackage (type: Exec) {
    workingDir pathToUnzipFolder 
    commandLine osAdaptiveCommand("jlink", "--add-modules", "java.base,java.desktop,java.management,java.sql", "--output", "ilivalidator-jre")   
}

private static Iterable<String> osAdaptiveCommand(String... commands) {
    def newCommands = []
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        newCommands = ['cmd', '/c']
    }
    newCommands.addAll(commands)
    return newCommands
}
*/
/*
dependencies {
    implementation 'com.google.guava:guava:29.0-jre'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
}
*/

/*
application {
    mainClassName = 'ch.so.agi.oereb.v2.App'
}
*/

/*
test {
    useJUnitPlatform()
}
*/
